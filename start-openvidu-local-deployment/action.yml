name: Start OpenVidu Local Deployment
description: Start OpenVidu Local Deployment with Docker Compose
inputs:
  ref-openvidu-local-deployment:
    description: "Branch, tag or commit SHA to checkout in repository OpenVidu/openvidu-local-deployment"
    required: false
    default: "development"
  timeout:
    description: "Maximum time to wait for deployment startup (in milliseconds)"
    required: false
    default: "100000"
  openvidu-edition:
    description: 'OpenVidu edition to use. Must be one of "community" or "pro"'
    required: true
    default: "community"
  rtc-engine:
    description: 'RTC engine to use. Only takes effect if openvidu-edition == "pro". Must be one of "pion" or "mediasoup"'
    default: "mediasoup"
    required: false
  mediasoup-worker-bin:
    description: 'Path to the mediasoup-worker binary. Only takes effect if openvidu-edition == "pro" && rtc-engine == "mediasoup". If provided, ref-openvidu-pro-mediasoup will be ignored. This is useful to avoid setting up the mediasoup-worker binary twice if action setup-mediasoup-worker has already been called before'
    required: false
    default: ""
  ref-openvidu-pro-mediasoup:
    description: 'If mediasoup-worker-bin is not provided, branch, tag or commit SHA to checkout in repository OpenVidu/openvidu-pro-mediasoup. Only takes effect if openvidu-edition == \"pro\" && rtc-engine == \"mediasoup\". If "default" mediasoup-worker binary will not be compiled: artifact from latest release of OpenVidu/openvidu-pro-mediasoup will be used'
    required: false
    default: "default"
  tags-openvidu-local-deployment:
    description: "JSON object with tags for overwriting values in the docker-compose.yaml services of the openvidu-local-deployment (https://github.com/OpenVidu/openvidu-local-deployment/blob/main/pro/docker-compose.yaml).\nExample: {\"caddy-proxy\": \"main\", \"redis\": \"7.4.2-alpine\", \"minio\": \"2025.2.7-debian-12-r0\", \"mongo\": \"8.0.4\", \"dashboard\": \"main\", \"ingress\": \"main\", \"egress\": \"v1.9.0\", \"default-app\": \"main-demo\", \"openvidu-v2compatibility\": \"main\", \"operator\": \"main\"}"
    required: false
  github-token:
    description: 'GitHub token to access private repositories. Only required if openvidu-edition == "pro" && rtc-engine == "mediasoup" && ref-openvidu-pro-mediasoup != "default"'
    required: false
  pre_startup_commands:
    description: "Commands to execute before starting the deployment. The path is the same as the docker-compose.yaml file"
    required: false
    default: ""
  mode:
    description: 'Execution mode. Use "--only-pull-images" to only pull and cache Docker images without starting the deployment'
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout OpenVidu/openvidu-local-deployment
      uses: actions/checkout@v4
      with:
        repository: OpenVidu/openvidu-local-deployment
        ref: ${{ inputs.ref-openvidu-local-deployment }}
        path: openvidu-local-deployment

    - name: Checkout OpenVidu/openvidu-pro-mediasoup
      uses: actions/checkout@v4
      if: ${{ inputs.openvidu-edition == 'pro' && inputs.rtc-engine == 'mediasoup' && inputs.ref-openvidu-pro-mediasoup != 'default' && inputs.mediasoup-worker-bin == '' }}
      with:
        repository: OpenVidu/openvidu-pro-mediasoup
        ref: ${{ inputs.ref-openvidu-pro-mediasoup }}
        path: openvidu-pro-mediasoup
        token: ${{ inputs.github-token }}

    - name: Install required packages
      shell: bash
      run: |
        sudo apt update && sudo apt install -y build-essential jq
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.45.4/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

    - name: Setup mediasoup-worker
      if: ${{ inputs.openvidu-edition == 'pro' && inputs.rtc-engine == 'mediasoup' && inputs.mediasoup-worker-bin == '' }}
      id: setup-mediasoup-worker
      uses: OpenVidu/actions/setup-mediasoup-worker@main
      with:
        ref-openvidu-pro-mediasoup: ${{ inputs.ref-openvidu-pro-mediasoup }}
        github-token: ${{ inputs.github-token }}

      # This step saves every JSON key-value pair from the input `tags-openvidu-local-deployment` as environment variables.
      # {"my-key": "my-value"} -> TAG_MY_KEY=my-value
    - name: Set OpenVidu Local Deployment tags as env vars from JSON
      shell: bash
      if: ${{ inputs.tags-openvidu-local-deployment != '' }}
      run: |
        echo '${{ inputs.tags-openvidu-local-deployment }}' | jq -r 'to_entries[] | "TAG_\(.key | ascii_upcase | gsub("-"; "_"))=\(.value)"' >> "$GITHUB_ENV"

    - name: Tag OpenVidu Local Deployment
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      run: |
        # Function to update image tag for a service in the docker-compose.yaml
        # For it to take effect, the service must exist and the tag must be non-empty
        update_service_tag() {
          local service_name="$1"
          local new_tag="$2"
          if [ -n "$new_tag" ]; then
            # Check if the service exists in the docker-compose.yaml
            if yq e ".services | has(\"$service_name\")" docker-compose.yaml | grep -q "true"; then
              local current_image=$(yq e ".services.$service_name.image" docker-compose.yaml)
              local base_image=${current_image%:*}
              yq e -i ".services.$service_name.image = \"$base_image:$new_tag\"" docker-compose.yaml
            fi
          fi
        }
        update_service_tag "caddy-proxy" "$TAG_CADDY_PROXY"
        update_service_tag "redis" "$TAG_REDIS"
        update_service_tag "minio" "$TAG_MINIO"
        update_service_tag "mongo" "$TAG_MONGO"
        update_service_tag "dashboard" "$TAG_DASHBOARD"
        update_service_tag "openvidu" "$TAG_OPENVIDU"
        update_service_tag "ingress" "$TAG_INGRESS"
        update_service_tag "egress" "$TAG_EGRESS"
        update_service_tag "default-app" "$TAG_DEFAULT_APP"
        update_service_tag "openvidu-v2compatibility" "$TAG_OPENVIDU_V2COMPATIBILITY"
        update_service_tag "operator" "$TAG_OPERATOR"

    - name: Run pre-startup commands
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      if: ${{ inputs.pre_startup_commands != '' }}
      run: |
        echo "Executing pre-startup commands..."
        ${{ inputs.pre_startup_commands }}


    - name: Get Docker Images List
      id: get-images
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      run: |
        # Get list of images from docker-compose.yaml
        IMAGES=$(docker compose config | yq e '.services[].image' - | sort | uniq | tr '\n' ' ')
        echo "images=$IMAGES" >> $GITHUB_OUTPUT
        # Create a hash for cache key based on images list
        IMAGES_HASH=$(echo "$IMAGES" | md5sum | cut -d' ' -f1)
        echo "images-hash=$IMAGES_HASH" >> $GITHUB_OUTPUT

    - name: Restore Docker Images from Cache
      id: cache-docker-restore
      if: ${{ inputs.mode != '--only-pull-images' }}
      uses: actions/cache/restore@v4
      with:
        path: ~/docker-images-cache
        key: docker-images-${{ inputs.openvidu-edition }}-${{ steps.get-images.outputs.images-hash }}
        restore-keys: |
          docker-images-${{ inputs.openvidu-edition }}-

    - name: Load Cached Docker Images
      shell: bash
      if: ${{ inputs.mode != '--only-pull-images' && steps.cache-docker-restore.outputs.cache-hit == 'true' }}
      run: |
        echo "Loading cached Docker images..."
        CACHE_DIR="$HOME/docker-images-cache"

        if [ -d "$CACHE_DIR" ] && [ "$(ls -A $CACHE_DIR)" ]; then
          for tar_file in "$CACHE_DIR"/*.tar; do
            if [ -f "$tar_file" ]; then
              echo "Loading: $tar_file"
              docker load < "$tar_file" || echo "Failed to load: $tar_file"
            fi
          done
          echo "Cached images loaded successfully"
        else
          echo "No cached images found"
        fi

    - name: Configure OpenVidu Local Deployment
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      env:
        MEDIASOUP_WORKER_BIN: ${{ inputs.mediasoup-worker-bin || steps.setup-mediasoup-worker.outputs.MEDIASOUP_WORKER_BIN }}
      run: |
        ./configure_lan_private_ip_linux.sh
        if [ "${{ inputs.openvidu-edition }}" = "pro" ]; then
          yq e -i '.openvidu.rtc.engine = "${{ inputs.rtc-engine }}"' livekit.yaml
          yq e -i '.openvidu.rtc.engine = "${{ inputs.rtc-engine }}"' ingress.yaml
          if [ "${{ inputs.rtc-engine }}" = "mediasoup" ]; then
            yq e -i '.services.openvidu.environment += ["MEDIASOUP_WORKER_BIN='${MEDIASOUP_WORKER_BIN:-}'"]' docker-compose.yaml
          fi
        fi

        if [ "${{ inputs.mode }}" = "--only-pull-images" ]; then
          echo "Mode: Only pulling images..."
          docker compose pull --ignore-pull-failures
          echo "Images pulled successfully."
        else
          docker compose down -v
          # Pull only missing images (cached ones are already loaded)
          docker compose pull --ignore-pull-failures
        fi

    - name: Save Docker Images to Cache Directory
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      if: ${{ steps.cache-docker-restore.outputs.cache-hit != 'true' }}
      run: |
        echo "Saving Docker images for caching..."
        CACHE_DIR="$HOME/docker-images-cache"
        mkdir -p "$CACHE_DIR"

        # Get list of images from docker-compose.yaml
        IMAGES=$(docker compose config | yq e '.services[].image' - | sort | uniq)

        for image in $IMAGES; do
          CACHE_FILE="$CACHE_DIR/$(echo "$image" | sed 's/[:/]/__/g').tar"
          echo "Saving image: $image"
          docker save "$image" > "$CACHE_FILE" || echo "Failed to save image: $image"
        done

        echo "Image saving completed."

    - name: Save Docker Images to GitHub Cache
      if: ${{ steps.cache-docker-restore.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: ~/docker-images-cache
        key: docker-images-${{ inputs.openvidu-edition }}-${{ steps.get-images.outputs.images-hash }}

    - name: Run OpenVidu Local Deployment
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      if: ${{ inputs.mode != '--only-pull-images' }}
      run: |
        docker compose up -d

    - name: Wait until OpenVidu Local Deployment ready
      shell: bash
      working-directory: ./openvidu-local-deployment/${{ inputs.openvidu-edition }}
      if: ${{ inputs.mode != '--only-pull-images' }}
      run: |
        CONTAINER_NAME_PART="ready-check"
        TIMEOUT_MS=${{ inputs.timeout }}
        TIMEOUT=$((TIMEOUT_MS / 1000))
        INTERVAL=1
        START_TIME=$(date +%s)

        get_container_id() {
          docker ps -aqf "name=$CONTAINER_NAME_PART"
        }

        echo "Waiting for container '$CONTAINER_NAME_PART' to be created..."
        while true; do
          CONTAINER_ID=$(get_container_id)
          if [[ -n "$CONTAINER_ID" ]]; then
            echo "Container found: $CONTAINER_ID"
            break
          fi
          sleep "$INTERVAL"
          CURRENT_TIME=$(date +%s)
          if (( CURRENT_TIME - START_TIME >= TIMEOUT )); then
            echo "Timeout: Container did not appear within $TIMEOUT seconds."
            exit 1
          fi
        done

        echo "Waiting for container to exit..."
        while true; do
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' "$CONTAINER_ID")
          if [[ "$CONTAINER_STATUS" == "exited" ]]; then
            EXIT_CODE=$(docker inspect --format='{{.State.ExitCode}}' "$CONTAINER_ID")
            if [[ "$EXIT_CODE" -eq 0 ]]; then
              echo "Container exited successfully with code 0."
              exit 0
            else
              echo "Container exited with non-zero exit code: $EXIT_CODE"
              exit 1
            fi
          fi
          sleep "$INTERVAL"
          CURRENT_TIME=$(date +%s)
          if (( CURRENT_TIME - START_TIME >= TIMEOUT )); then
            echo "Timeout: Container did not exit within $TIMEOUT seconds."
            exit 1
          fi
        done
